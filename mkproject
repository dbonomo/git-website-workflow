#! /usr/bin/env bash
#
# mkproject
#
# Create new or existing git-capable, self-hosted, projects easily.
#
# James Doyle(james2doyle)
# Copyright 2013 MIT

red=$(tput setaf 1 || tput AF 1)
green=$(tput setaf 2 || tput AF 2)
yellow=$(tput setaf 3 || tput AF 3)
blue=$(tput setaf 4 || tput AF 4)
magenta=$(tput setaf 5 || tput AF 5)
cyan=$(tput setaf 6 || tput AF 6)
reset=$(tput sgr0)
unset folderexists

# grab the name of the project to also be used as the folder names
echo -n "Enter a project/subdomain name (something.nerdymind.com): "
read folder

# check for the existance of $folder, exit out if one exists
#if [[ -e "$folder" ]]; then
#  printf "$red$folder already exists. Use another name or remove $folder\n$reset"
#  exit 1
#fi

# check to see if folder exists, let the user know that the contents will create the initial commit. 
if [[ -e "$folder" ]]; then
  printf "$green$folder already exists. Contents of$reset $red$folder$reset$green will be committed into the site repository \n$reset"
  folderexists=true
fi

hubFolder="${folder}.hub"
thisPath="${PWD}"

printf "Creating $red$hubFolder$reset repository hub\n\n"

mkdir "$hubFolder"
cd "$hubFolder"

git --bare init --shared=all

touch hooks/post-receive
chmod u+x hooks/post-receive

# creating htaccess so that you can't see the .git directory
touch .htaccess
cat > .htaccess <<- _EOF_
Order allow,deny
Deny from all
_EOF_

printf "Created$yellow .htaccess$reset to deny http access\n\n"

cat > hooks/post-receive <<- _EOF_
#!/bin/sh
echo "pulling changes to live site directory"
cd $(printf $thisPath/$folder)
unset GIT_DIR
git pull hub master
exec git-update-server-info
_EOF_

printf "Created$yellow .git/hooks/post-receive$reset with hub pull\n\n"

if [[ -e "$folderexists" ]]; then
# init existing folder
  #back out of hub dir
	cd ../
	cd "$folder"
	printf "Commtting $red$folder$reset to the site folder\n\n"
	
	git init --shared=all
else
# start prime folder creation
	#back out of hub dir
	cd ../
	
	printf "Creating $red$folder$reset site folder\n\n"
	
	mkdir "$folder"
	cd "$folder"
	
	git init --shared=all
fi

# creates post-commit hook
touch .git/hooks/post-commit
chmod u+x .git/hooks/post-commit

cat > .git/hooks/post-commit <<- _EOF_
#!/bin/sh
echo "pushing changes to hub"
git push hub master
_EOF_

printf "\nCreated$yellow .git/hooks/post-commit$reset with push to hub\n\n"

git remote add hub $(echo $thisPath)/$hubFolder
git remote show hub

touch .gitignore

cat > .gitignore <<- _EOF_
.DS_Store
_EOF_

printf "\ncreated$yellow .gitignore$reset\n\n"

touch README.md

cat > README.md <<- _EOF_
$folder
==================
Created on $(TZ=EST date)
_EOF_

printf "created$yellow README.md$reset\n\n"

git add .
git commit -m 'initial'
git push hub master
cd ../

printf "$green\nFINISHED CREATING $folder PROJECT$reset\n\n"

exit 0
